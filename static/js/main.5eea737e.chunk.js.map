{"version":3,"sources":["components/Title/Title.jsx","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Loader/Loader.jsx","components/ContactsList/ContactsList.jsx","components/ContactsList/ContactsLict.conteiner.jsx","components/ContactFilter/ContactFilter.jsx","App.js","redux/store.js","index.js"],"names":["Title","title","className","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","a","contact","post","data","id","delete","get","items","createReducer","state","payload","contacts","find","toLowerCase","alert","findContact","filter","_","loading","combineReducers","getFilter","getAllContacts","normalizedFilter","includes","Form","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","target","reset","props","onSubmit","this","onChange","type","pattern","required","disabled","Component","connect","contactsOperations","Spinner","color","height","width","ContactsList","onDeleteContact","isLoadingContacts","map","onClick","uuidv4","contactsSelectors","App","fetchContacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5eea737e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport './Title.scss';\r\n\r\nconst Title = ({ title }) => <h2 className=\"Title\">{title}</h2>;\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Title;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/ChangeFilter');\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-action';\r\n\r\nconst findContact = (contacts, payload) => {\r\n  const contact = contacts.find(\r\n    ({ name }) => name.toLowerCase() === payload.name.toLowerCase(),\r\n  );\r\n\r\n  if (!contact) {\r\n    return [...contacts, payload];\r\n  } else {\r\n    alert(`${payload.name} is already in contacts`);\r\n    return contacts;\r\n  }\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => findContact(state, payload),\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","const getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = state => {\r\n  const contacts = getAllContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getLoading, getFilter, getVisibleContacts };\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Title from '../Title';\r\nimport { contactsOperations } from '../../redux/contacts';\r\nimport './ContactForm.scss';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    event.target.reset();\r\n    const { name, number } = this.state;\r\n\r\n    this.props.onSubmit(name, number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <Title title=\"Phonebook\" />\r\n\r\n        <div className=\"Phonebook\">\r\n          <form className=\"Phonebook__form\" onSubmit={this.handleSubmit}>\r\n            <label className=\"Phonebook__label\">\r\n              Name\r\n              <input\r\n                className=\"Phonebook__input\"\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </label>\r\n\r\n            <label className=\"Phonebook__label\">\r\n              Number\r\n              <input\r\n                className=\"Phonebook__input\"\r\n                onChange={this.handleChange}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </label>\r\n\r\n            <button\r\n              className=\"Phonebook__button\"\r\n              type=\"submit\"\r\n              disabled={!name && !number}\r\n            >\r\n              Add contact\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import Loader from 'react-loader-spinner';\r\n\r\nconst Spinner = () => {\r\n  return <Loader type=\"ThreeDots\" color=\"#b57dff\" height={80} width={80} />;\r\n};\r\n\r\nexport default Spinner;\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Spinner from '../Loader';\r\n\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact, isLoadingContacts }) => (\r\n  <>\r\n    {isLoadingContacts && <Spinner />}\r\n\r\n    <ul className=\"ContactsList\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className=\"ContactsList__item\" key={uuidv4()}>\r\n          <p className=\"ContactsList__text\">\r\n            <span className=\"ContactsList__name\">{name}</span>: {number}\r\n          </p>\r\n          <button\r\n            className=\"ContactsList__button\"\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactsList;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactsList from './ContactsList';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import { connect } from 'react-redux';\r\nimport Title from '../Title';\r\n\r\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\r\nimport './ContactFilter.scss';\r\n\r\nconst ContactFilter = ({ value, onChange }) => (\r\n  <>\r\n    <Title title=\"Contacts\" />\r\n\r\n    <label className=\"Filter__label\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"Filter__input\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactsList';\nimport ContactFilter from './components/ContactFilter';\nimport { contactsOperations } from './redux/contacts';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <ContactForm />\n        <ContactFilter />\n        <ContactsList />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport { contactsReducer } from './contacts';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}